# Computer CLI - Directive Creation System

Add directive creation functionality to the existing Computer CLI application.

## Feature Overview
Implement a "directive" command that creates structured task files from natural language prompts. This system analyzes prompts and breaks them down into actionable todo items.

## New Commands
Add these commands to the existing CLI:
- `computer directive --text "Your task"` - Create directive from text
- `computer directive --file prompt.txt` - Create directive from file
- `computer directive -t "Task" --platform claude --model claude-3-sonnet` - With AI requirements

## Technical Implementation

### Python Agent Integration
- Create `agents/directive_agent.py` - Python script for directive processing
- Implement prompt analysis and task breakdown
- Generate structured markdown files with YAML frontmatter
- Support for templates and different task types

### Ruby CLI Integration
- Add `directive` command to main CLI
- Parse command-line options (--text, --file, --platform, --model)
- Call Python agent with appropriate arguments
- Handle success/error responses

## Directory Structure
Create these new directories and files:
```
├── agents/
│   └── directive_agent.py     # Python directive processor
├── directives/
│   ├── new/                   # Pending directives
│   ├── success/               # Completed directives
│   ├── failed/                # Failed directives
│   └── slow/                  # Slow directives
├── templates/
│   └── directive-prompt.md    # Basic directive template
```

## Directive File Format
Generate markdown files with YAML frontmatter:
```yaml
---
id: task-12345678
status: pending
priority: medium
created: 2024-01-01T12:00:00Z
slug: create-api-endpoint
---

# Directive: Create API endpoint

## Task Details
- **Priority**: medium
- **Status**: pending

## Prompt
[Detailed task description]

## Outputs
- Link to output: [[create-api-endpoint-output]]
```

## Key Features
1. **Prompt Analysis**: Break complex prompts into smaller tasks
2. **Priority Assignment**: Automatic priority based on keywords
3. **Template System**: Use templates for consistent formatting
4. **Prerequisites**: Support for task dependencies
5. **Platform Requirements**: Store AI platform/model preferences

## Success Criteria
- `computer directive --text "Build API"` creates directive files
- Files have proper YAML frontmatter and markdown structure
- Multiple tasks are created for complex prompts
- Templates are used for consistent formatting
- Error handling for invalid inputs

This adds the core directive creation functionality to the Computer CLI system.