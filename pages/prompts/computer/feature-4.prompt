# Computer CLI - AI Integration & Processing

Add AI-powered task execution capabilities to the Computer CLI system.

## Feature Overview
Integrate AI APIs (Claude, OpenAI) for intelligent task execution, enabling the system to process directives using large language models instead of simple script execution.

## New Features

### AI Client Integration
- Create `lib/ai_client.py` - Python client for AI API integration
- Support for multiple platforms (Claude via Anthropic API, OpenAI GPT models)
- Automatic platform and model selection based on directive requirements
- Token usage tracking and cost calculation

### Enhanced Engage Agent
- Add `--api-mode` flag to enable AI-powered execution
- Platform/model selection from directive metadata
- Enhanced context awareness and session persistence
- Performance metrics tracking (tokens, cost, duration)

## Technical Implementation

### AI Client (`lib/ai_client.py`)
```python
class AIClient:
    def __init__(self):
        # Initialize API clients for Claude and OpenAI
        
    def chat_completion(self, prompt, platform=None, model=None):
        # Execute task using specified AI platform/model
        # Return structured response with content, usage, metrics
```

### API Configuration
- Environment variable setup for API keys:
  - `ANTHROPIC_API_KEY` for Claude access
  - `OPENAI_API_KEY` for OpenAI access
- Automatic key validation and platform availability checking
- Graceful fallback when APIs are unavailable

### Platform Support
**Claude (Anthropic)**:
- claude-3-opus (highest capability)
- claude-3-sonnet (balanced performance)
- claude-3-haiku (fastest)

**OpenAI**:
- gpt-4 (highest capability)
- gpt-4-turbo (optimized performance)
- gpt-3.5-turbo (cost-effective)

## Enhanced Processing Features

### Context Awareness
- Session persistence across directive executions
- Completed task history for context
- Knowledge base accumulation
- Prerequisites context integration

### Performance Tracking
- Token usage monitoring (input/output)
- Cost calculation per directive
- Processing duration metrics
- Success/failure rate tracking

### Batch Processing
- Sequential API calls for multiple directives
- Intelligent batching for efficiency
- Rate limiting and retry logic
- Parallel processing with claiming mechanism

## New CLI Commands
- `computer engage --api-mode` - Use AI for task execution
- `computer engage --impulse` - Batch processing mode
- `computer status` - Show API configuration and metrics

## Directive Enhancements
Support for AI requirements in directive frontmatter:
```yaml
---
id: task-12345678
status: pending
priority: high
platform: claude
model: claude-3-sonnet
---
```

## Success Criteria
- API keys are properly configured and validated
- Directives specify platform/model requirements
- AI client successfully executes tasks via APIs
- Token usage and costs are tracked accurately
- Batch processing handles multiple directives efficiently
- Context is maintained across directive executions
- Performance metrics are logged and reportable

This transforms the Computer CLI from a simple task manager into an AI-powered automation system.