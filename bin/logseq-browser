#!/usr/bin/env ruby

require 'io/console'
require 'pathname'
require 'optparse'

# Define UI themes
THEMES = {
  'cassette' => {
    normal: "\e[0m",
    highlight: "\e[1;95m",
    link: "\e[4;1;96m",
    cursor: "\e[7m",
    accent: "\e[1;93m",
  },
  'matrix' => {
    normal:    "\e[0m",
    highlight: "\e[1;32m",
    link:      "\e[4;1;32m",
    cursor:    "\e[7m",
    accent:    "\e[2;32m",
  },
  'gothic' => {
    normal:    "\e[0m",
    highlight: "\e[1;33m", # candlelit yellow
    link:      "\e[4;36m", # underlined cyan for index-like links
    cursor:    "\e[7m",
    accent:    "\e[2;31m", # dim red for ominous accents
  },
}.freeze

options = {
  theme: ENV['LOGSEQ_CLI_THEME'] || 'cassette',
  no_portrait: ENV['LOGSEQ_CLI_NO_PORTRAIT'] == '1'
}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] [pages_directory]"
  opts.on("-tNAME", "--theme=NAME", "Theme to use (#{THEMES.keys.join(', ')})") { |t| options[:theme] = t }
  opts.on("--no-portrait", "Suppress the animated portrait pane") { options[:no_portrait] = true }
end.parse!

theme = options[:theme]
unless THEMES.key?(theme)
  puts "Unknown theme '#{theme}'. Available themes: #{THEMES.keys.join(', ')}"
  exit 1
end

SELECTED_THEME = theme
COLORS = THEMES[theme]
NO_PORTRAIT = options[:no_portrait]
 
# Random startup quotes to add personality
QUOTES = [
  "Ready to rock the logseqiverse!",
  "Carpe Diem, seize the day!",
  "All your notes are belong to us.",
  "Let the hacking commence.",
  "May your blocks always connect.",
  "Time flies like an arrow; logs like a pineapple.",
  "In the shadows of code, we find truth.",
].freeze

# Chat persona names and icons per theme
PERSONAS = {
  'cassette' => { name: 'Cassie', icon: 'üíæ' },
  'matrix'   => { name: 'Neo',    icon: 'üåê' },
  'gothic'   => { name: 'Edgar',  icon: 'ü¶á' },
}.freeze

class LogseqBrowser

  def initialize(pages_dir = 'pages')
    @pages_dir = Pathname.new(pages_dir)
    @pages = discover_pages
    @history = []
    @current_page = nil
    @cursor_pos = 0
    @view_mode = :list
    @content_lines = []
    @links = []
    @scroll_offset = 0

    # Portrait frames for right‚Äëhand animation
    @portrait_frames = load_portrait_frames
    @portrait_frame_index = 0
    @portrait_height = @portrait_frames.first ? @portrait_frames.first.size : 0
    @portrait_width  = @portrait_frames.first ? @portrait_frames.first.map(&:length).max : 0

    # Chat conversation history
    @conversation_history = []
    # Startup banners for per-theme splash
    @banner_frames = load_banner_frames
    @banner_frame_index = 0
  end

  def run
    setup_signal_handlers
    display_startup_screen
    clear_screen
    display_current_view
    
    loop do
      begin
        input = read_input
        next unless input # Skip if input reading failed
        
        case input
        when 'q'
          break if handle_quit_command
        when 'chat'
          enter_chat_mode
        when 'j'
          move_cursor_down
        when 'k'
          move_cursor_up
        when 'o'
          open_current_item
        when 'b'
          go_back
        when 'e'
          edit_current_page
        when 'theme', 'T'
          show_theme_menu
        when 13, 10 # Enter key
          open_current_item
        else
          # Handle other keys or ignore
        end
        
        display_current_view
      rescue => e
        puts "\n#{COLORS[:accent]}Error: #{e.message}#{COLORS[:normal]}"
        sleep 1
      end
    end
    
    cleanup
  end

  private

  def setup_signal_handlers
    Signal.trap('INT') do
      cleanup
      exit(0)
    end
    
    Signal.trap('TERM') do
      cleanup
      exit(0)
    end
  end

  # Load ASCII portrait frames from assets/faces/<theme>
  def load_portrait_frames
    begin
      frames_dir = File.expand_path("../../assets/faces/#{SELECTED_THEME}", __FILE__)
      return [] unless Dir.exist?(frames_dir)
      
      Dir.glob(File.join(frames_dir, '*.txt')).sort.map do |f|
        begin
          File.read(f).split("\n")
        rescue => e
          puts "Warning: Could not read portrait frame #{f}: #{e.message}"
          []
        end
      end.reject(&:empty?)
    rescue => e
      puts "Warning: Could not load portrait frames: #{e.message}"
      []
    end
  end

  # Render chat panel method placeholder

  # Render the current portrait frame in the right‚Äëhand pane
  def render_portrait_column
    begin
      return unless console_available?
      
      rows, cols = IO.console.winsize
      left_width = cols - @portrait_width
      frame = @portrait_frames[@portrait_frame_index] || []
      
      frame.each_with_index do |line, idx|
        print "\e[#{idx+1};#{left_width+1}H"
        print "#{COLORS[:accent]}#{line.ljust(@portrait_width)}#{COLORS[:normal]}"
      end
      
      @portrait_frame_index = (@portrait_frame_index + 1) % @portrait_frames.size if @portrait_frames.any?
    rescue => e
      # Silently continue if portrait rendering fails
    end
  end

  # Render the Pok√©mon‚Äëstyle chat box in the right‚Äëhand pane or full width
  def render_chat_panel(left_width:, width:)

  # Engage in a chat turn: read user input, call AI, display reply, optionally insert
  def enter_chat_mode
    begin
      print "\n#{COLORS[:highlight]}Chat> #{COLORS[:normal]}"
      STDOUT.flush
      user_input = STDIN.gets&.chomp
      return if user_input.to_s.strip.empty?

      should_insert = user_input.strip.start_with?('/insert')
      prompt = should_insert ? user_input.sub(%r{\A/insert\s*}, '') : user_input

      @conversation_history << { who: :user, text: prompt }

      # Build context for AI
      file_ctx = {
        path: @current_page ? @current_page[:path].to_s : nil,
        buffer: @content_lines.join("\n"),
        cursor_line: @cursor_pos,
        scroll_offset: @scroll_offset
      }

      # Call AI with error handling
      begin
        bot_reply = call_ai(prompt, file_ctx)
        @conversation_history << { who: :bot, text: bot_reply }
        insert_text_at_cursor(bot_reply) if should_insert
      rescue => e
        error_msg = "Error calling AI: #{e.message}"
        @conversation_history << { who: :bot, text: error_msg }
        puts "\n#{COLORS[:accent]}#{error_msg}#{COLORS[:normal]}"
      end
    rescue => e
      puts "\n#{COLORS[:accent]}Chat error: #{e.message}#{COLORS[:normal]}"
    end
  end

  # Placeholder AI call - replace with real integration
  def call_ai(prompt, context)
    # TODO: integrate with Claude/Codex API using `prompt` and `context`
    # For now, return a safe placeholder response
    begin
      # Simulate potential AI service call
      raise "AI service not configured" if ENV['AI_API_KEY'].nil?
      "[AI reply to: #{prompt}]"
    rescue => e
      raise "AI integration error: #{e.message}"
    end
  end

  # Insert given text at cursor position in the current buffer and write file
  def insert_text_at_cursor(text)
    begin
      return unless text && !text.strip.empty?
      
      lines = text.lines.map(&:chomp)
      @content_lines.insert(@cursor_pos, *lines)
      
      if @current_page && @current_page[:path]
        File.write(@current_page[:path], @content_lines.join("\n"))
      end
    rescue => e
      puts "\n#{COLORS[:accent]}Error inserting text: #{e.message}#{COLORS[:normal]}"
    end
  end
    rows, cols = IO.console.winsize
    # Determine panel top (below portrait) and height (above status line)
    panel_top = @portrait_height + 1
    # Leave space for status border and commands (3 lines)
    panel_height = rows - panel_top - 3

    # Build border
    inner_width = width - 2
    top_border = "#{COLORS[:accent]}‚îå#{'‚îÄ' * inner_width}‚îê#{COLORS[:normal]}"
    bottom_border = "#{COLORS[:accent]}‚îî#{'‚îÄ' * inner_width}‚îò#{COLORS[:normal]}"

    # Collect history lines, truncate/pad
    history_lines = @conversation_history.map do |entry|
      if entry[:who] == :user
        prefix = 'You: '
      else
        persona = PERSONAS[SELECTED_THEME] || { icon: '', name: 'AI' }
        prefix = "#{persona[:icon]}#{persona[:name]}: "
      end
      text = (prefix + entry[:text]).gsub(/\e\[[0-9;]*m/, '')
      text[0, inner_width].ljust(inner_width)
    end
    visible = history_lines.last(panel_height)

    # Assemble panel lines
    panel_lines = [top_border]
    visible.each { |ln| panel_lines << "#{COLORS[:normal]}‚îÇ#{ln}‚îÇ" }
    # Pad empty lines
    (panel_height - visible.size).times do
      panel_lines << "#{COLORS[:normal]}‚îÇ#{' ' * inner_width}‚îÇ"
    end
    panel_lines << bottom_border

    # Print at right-hand side
    panel_lines.each_with_index do |ln, idx|
      print "\e[#{panel_top + idx};#{left_width + 1}H#{ln}"
    end
  end

  # Load ASCII portrait frames from assets/faces/<theme>
  def load_portrait_frames
    begin
      frames_dir = File.expand_path("../../assets/faces/#{SELECTED_THEME}", __FILE__)
      return [] unless Dir.exist?(frames_dir)
      
      Dir.glob(File.join(frames_dir, '*.txt')).sort.map do |f|
        begin
          File.read(f).split("\n")
        rescue => e
          puts "Warning: Could not read portrait frame #{f}: #{e.message}"
          []
        end
      end.reject(&:empty?)
    rescue => e
      puts "Warning: Could not load portrait frames: #{e.message}"
      []
    end
  end

  # Load ASCII banner frames from assets/banners/<theme> for splash screen
  def load_banner_frames
    begin
      dir = File.expand_path("../../assets/banners/#{SELECTED_THEME}", __FILE__)
      return [] unless Dir.exist?(dir)

      Dir.glob(File.join(dir, '*.txt')).sort.map do |f|
        File.read(f).split("\n") rescue []
      end.reject(&:empty?)
    rescue
      []
    end
  end

  # Display startup splash with theme banner, quote, and effect
  def display_startup_screen
    return unless console_available?
    clear_screen
    rows, cols = IO.console.winsize

    # Show banner (external frames or fallback)
    banner = @banner_frames.any? ? @banner_frames.first : []
    if banner.any?
      banner.each do |line|
        pad = [(cols - line.length) / 2, 0].max
        print ' ' * pad
        puts "#{COLORS[:highlight]}#{line}#{COLORS[:normal]}"
      end
    else
      render_banner
    end

    # Random quote
    quote = QUOTES.sample
    pad = [(cols - quote.length) / 2, 0].max
    print '\n' + ' ' * pad
    puts "#{COLORS[:accent]}" + quote + "#{COLORS[:normal]}"

    # Theme-specific intro effect
    case SELECTED_THEME
    when 'matrix'
      animate_matrix_rain
    when 'cassette'
      display_confetti(cols)
    when 'gothic'
      display_gothic_effect(cols)
    end

    sleep 1.2
  end

  # Simple confetti effect for cassette theme
  def display_confetti(width)
    3.times do
      print COLORS[:accent]
      width.times { print ['*', '+', 'o', '@'].sample }
      puts COLORS[:normal]
      sleep 0.05
    end
  end


  # Gothic-style cryptic effect for gothic theme
  def display_gothic_effect(width)
    3.times do
      print COLORS[:accent]
      width.times { print ['+', '‚Ä†', '|', '/'].sample }
      puts COLORS[:normal]
      sleep 0.05
    end
  end

  # Render top HUD panel with current time, theme, and context info
  def render_hud_panel
    return unless console_available?
    rows, cols = IO.console.winsize
    info = if @view_mode == :list
             "Dir: #{@pages_dir} | Pages: #{@pages.size}"
           else
             path = @current_page ? @current_page[:relative_path] : ''
             lines = @content_lines.size
             pos = @cursor_pos + 1
             "File: #{path} | Line: #{pos}/#{lines}"
           end
    time_str = Time.now.strftime('%Y-%m-%d %H:%M:%S')
    header = " Time: #{time_str} | Theme: #{SELECTED_THEME} | #{info} "
    # Draw box around HUD
    top = COLORS[:accent] + '‚îè' + '‚îÅ' * (cols - 2) + '‚îì' + COLORS[:normal]
    middle = COLORS[:highlight] + '‚îÉ' + COLORS[:normal] + header.center(cols - 2) + COLORS[:highlight] + '‚îÉ' + COLORS[:normal]
    bottom = COLORS[:accent] + '‚îó' + '‚îÅ' * (cols - 2) + '‚îõ' + COLORS[:normal]
    puts top
    puts middle
    puts bottom
  end

  def show_theme_menu
    return unless console_available?
    rows, cols = IO.console.winsize
    menu_items = THEMES.keys
    selected = menu_items.index(SELECTED_THEME) || 0
    height = menu_items.size + 4
    width = menu_items.map(&:length).max + 4
    top = (rows - height) / 2
    left = (cols - width) / 2
    loop do
      (0...height).each do |i|
        print "\e[#{top + i};#{left}H"
        if i == 0
          print COLORS[:accent] + "‚îå" + "‚îÄ" * (width - 2) + "‚îê" + COLORS[:normal]
        elsif i == height - 1
          print COLORS[:accent] + "‚îî" + "‚îÄ" * (width - 2) + "‚îò" + COLORS[:normal]
        elsif i == 1
          title = " Select Theme "
          print COLORS[:highlight] + "‚îÇ" + title.center(width - 2) + "‚îÇ" + COLORS[:normal]
        else
          idx = i - 2
          break unless menu_items[idx]
          if idx == selected
            label = COLORS[:cursor] + menu_items[idx].ljust(width - 2) + COLORS[:normal]
          else
            label = menu_items[idx].ljust(width - 2)
          end
          print COLORS[:accent] + "‚îÇ" + COLORS[:normal] + label + COLORS[:accent] + "‚îÇ" + COLORS[:normal]
        end
      end
      STDOUT.flush
      c = read_char
      case c
      when 'j'
        selected = (selected + 1) % menu_items.size
      when 'k'
        selected = (selected - 1) % menu_items.size
      when 13, 10
        change_theme(menu_items[selected])
        break
      when 'q', "\e"
        break
      end
    end
    clear_screen
  end

  def change_theme(theme)
    return unless THEMES.key?(theme)
    Object.send(:remove_const, :SELECTED_THEME)
    Object.const_set(:SELECTED_THEME, theme)
    Object.send(:remove_const, :COLORS)
    Object.const_set(:COLORS, THEMES[theme])
    @portrait_frames = load_portrait_frames
    @portrait_frame_index = 0
    @banner_frames = load_banner_frames
    @banner_frame_index = 0
  end

  # Render portrait frames and chat history inside a bordered popup overlay
  def show_chat_popup(left_width:, width:)
    return unless console_available?
    rows, cols = IO.console.winsize
    hud_height = 3
    status_height = 3
    available_h = rows - hud_height - status_height
    portrait_h = (!NO_PORTRAIT && @portrait_frames.any?) ? @portrait_height : 0
    divider_h = portrait_h > 0 ? 1 : 0
    border_h = 2
    max_chat_h = [available_h - portrait_h - divider_h - border_h, 0].max
    # Prepare chat lines without ANSI codes
    history_lines = @conversation_history.map do |entry|
      prefix = entry[:who] == :user ? 'You: ' : "#{PERSONAS[SELECTED_THEME][:icon]}#{PERSONAS[SELECTED_THEME][:name]}: "
      (prefix + entry[:text]).gsub(/\e\[[0-9;]*m/, '')
    end
    visible = history_lines.last(max_chat_h)
    popup_h = portrait_h + divider_h + visible.size + border_h
    inner_w = width - 2
    top = hud_height + 1
    left = left_width + 1
    # Draw popup border and blank interior
    (0...popup_h).each do |i|
      y = top + i
      print "\e[#{y};#{left}H"
      if i == 0
        print COLORS[:accent] + '‚îå' + '‚îÄ' * inner_w + '‚îê' + COLORS[:normal]
      elsif i == popup_h - 1
        print COLORS[:accent] + '‚îî' + '‚îÄ' * inner_w + '‚îò' + COLORS[:normal]
      else
        print COLORS[:accent] + '‚îÇ' + COLORS[:normal] + ' ' * inner_w + COLORS[:accent] + '‚îÇ' + COLORS[:normal]
      end
    end
    # Draw portrait frames centered within popup
    if portrait_h > 0
      frame = @portrait_frames[@portrait_frame_index] || []
      frame.each_with_index do |line, idx|
        y = top + 1 + idx
        x = left + 1 + [(inner_w - line.length) / 2, 0].max
        print "\e[#{y};#{x}H#{COLORS[:accent]}#{line}#{COLORS[:normal]}"
      end
      @portrait_frame_index = (@portrait_frame_index + 1) % @portrait_frames.size
      # Divider between portrait and chat
      y = top + 1 + portrait_h
      print "\e[#{y};#{left}H#{COLORS[:accent]}‚îú#{'‚îÄ' * inner_w}‚î§#{COLORS[:normal]}"
    end
    # Render chat history lines
    visible.each_with_index do |ln, idx|
      y = top + portrait_h + divider_h + 1 + idx
      print "\e[#{y};#{left + 1}H#{COLORS[:normal]}#{ln.ljust(inner_w)}"
    end
  end

  def discover_pages
    pages = []
    @pages_dir.glob('**/*.md').each do |file|
      next if file.basename.to_s.start_with?('.')
      pages << {
        name: file.basename('.md').to_s.gsub('_', ' '),
        path: file,
        relative_path: file.relative_path_from(@pages_dir)
      }
    end
    pages.sort_by { |p| p[:name] }
  end

  def parse_markdown_content(file_path)
    return [] unless file_path.exist?
    
    content = file_path.read
    lines = content.split("\n")
    parsed_lines = []
    links = []
    
    lines.each_with_index do |line, index|
      # Extract [[wiki-style]] links
      wiki_links = line.scan(/\[\[([^\]]+)\]\]/)
      wiki_links.each do |link_text|
        link_name = link_text[0]
        links << {
          text: link_name,
          line: index,
          type: :wiki
        }
      end
      
      # Extract [markdown](links)
      md_links = line.scan(/\[([^\]]+)\]\(([^)]+)\)/)
      md_links.each do |link_text, link_url|
        if link_url.end_with?('.md')
          links << {
            text: link_text,
            target: link_url,
            line: index,
            type: :markdown
          }
        end
      end
      
      parsed_lines << line
    end
    
    @links = links
    parsed_lines
  end

  def display_current_view
    begin
      clear_screen
      render_hud_panel

      # Matrix theme animation only when wide and portrait enabled
      if console_available?
        rows, cols = IO.console.winsize
        animate_matrix_rain if cols >= 180 && !NO_PORTRAIT && SELECTED_THEME == 'matrix'
      end

      case @view_mode
      when :list
        display_page_list
      when :content
        display_page_content
      end

      # Portrait + chat popup (chat always shown in bordered overlay)
      if console_available?
        rows, cols = IO.console.winsize
        if cols >= 180 && !NO_PORTRAIT && @portrait_width > 0
          show_chat_popup(left_width: cols - @portrait_width, width: @portrait_width)
        else
          show_chat_popup(left_width: 0, width: cols)
        end
      end

      display_status_line
    rescue => e
      puts "Display error: #{e.message}"
    end
  end

  def render_banner
    puts "#{COLORS[:highlight]}    .------.      .------.#{COLORS[:normal]}"
    puts "#{COLORS[:highlight]}    |  ‚óã   |      |  ‚óã   |#{COLORS[:normal]}"
    puts "#{COLORS[:highlight]}    |      |      |      |#{COLORS[:normal]}"
    puts "#{COLORS[:highlight]}    '------'      '------'#{COLORS[:normal]}"
    puts "#{COLORS[:link]}===[ #{COLORS[:highlight]}LOGSEQ CLI BROWSER#{COLORS[:link]} ]===#{COLORS[:normal]}"
  end

  def display_page_list
    render_banner
    
    if console_available?
      width = IO.console.winsize[1]
      puts "#{COLORS[:accent]}#{'‚îÄ' * width}#{COLORS[:normal]}"
    else
      puts "#{COLORS[:accent]}#{'‚îÄ' * 80}#{COLORS[:normal]}"
    end
    
    visible_pages = get_visible_items(@pages)
    
    visible_pages.each_with_index do |page, index|
      actual_index = @scroll_offset + index
      prefix = actual_index == @cursor_pos ? "#{COLORS[:cursor]}> " : "  "
      suffix = actual_index == @cursor_pos ? COLORS[:normal] : ""
      
      puts "#{prefix}#{page[:name]}#{suffix}"
    end
  end

  def display_page_content
    return unless @current_page
    
    puts "#{COLORS[:highlight]}#{@current_page[:name]}#{COLORS[:normal]}"
    
    if console_available?
      width = IO.console.winsize[1]
      puts "#{COLORS[:accent]}#{'‚îÄ' * width}#{COLORS[:normal]}"
    else
      puts "#{COLORS[:accent]}#{'‚îÄ' * 80}#{COLORS[:normal]}"
    end
    
    visible_lines = get_visible_items(@content_lines)
    
    visible_lines.each_with_index do |line, index|
      actual_index = @scroll_offset + index
      display_line = highlight_links_in_line(line, actual_index)
      
      if actual_index == @cursor_pos
        puts "#{COLORS[:cursor]}#{display_line}#{COLORS[:normal]}"
      else
        puts display_line
      end
    end
  end

  def highlight_links_in_line(line, line_index)
    display_line = line.dup
    
    # Highlight [[wiki-style]] links
    display_line.gsub!(/\[\[([^\]]+)\]\]/) do |match|
      link_text = $1
      if has_link_at_line?(line_index)
        "#{COLORS[:link]}[[#{link_text}]]#{COLORS[:normal]}"
      else
        match
      end
    end
    
    # Highlight [markdown](links)
    display_line.gsub!(/\[([^\]]+)\]\(([^)]+)\)/) do |match|
      link_text = $1
      link_url = $2
      if link_url.end_with?('.md') && has_link_at_line?(line_index)
        "#{COLORS[:link]}[#{link_text}](#{link_url})#{COLORS[:normal]}"
      else
        match
      end
    end
    
    display_line
  end

  def has_link_at_line?(line_index)
    @links.any? { |link| link[:line] == line_index }
  end

  def display_status_line
    if console_available?
      screen_width = IO.console.winsize[1]
      puts "\n#{COLORS[:accent]}#{'‚îÄ' * screen_width}#{COLORS[:normal]}"
    else
      puts "\n#{COLORS[:accent]}#{'‚îÄ' * 80}#{COLORS[:normal]}"
    end
    
    case @view_mode
    when :list
      puts "#{COLORS[:highlight]}j/k#{COLORS[:normal]}: navigate, #{COLORS[:highlight]}o/Enter#{COLORS[:normal]}: open, #{COLORS[:highlight]}:q#{COLORS[:normal]}: quit"
    when :content
      puts "#{COLORS[:highlight]}j/k#{COLORS[:normal]}: navigate, #{COLORS[:highlight]}o/Enter#{COLORS[:normal]}: follow link, #{COLORS[:highlight]}b#{COLORS[:normal]}: back, #{COLORS[:highlight]}e#{COLORS[:normal]}: edit, #{COLORS[:highlight]}:q#{COLORS[:normal]}: quit"
    end
  end

  # Helper method to check if console is available
  def console_available?
    begin
      IO.console && IO.console.winsize
      true
    rescue
      false
    end
  end

  def get_visible_items(items)
    return items unless console_available?
    rows, = IO.console.winsize

    # Calculate header and status heights
    hud_height = 3
    status_height = 3
    header_height = if @view_mode == :list
                      banner_height = 5 # 4 lines of ASCII + title
                      sep = 1
                      hud_height + banner_height + sep
                    else
                      title = 1
                      sep = 1
                      hud_height + title + sep
                    end
    terminal_height = rows - header_height - status_height

    if items.length <= terminal_height
      @scroll_offset = 0
      return items
    end

    # Adjust scroll offset to keep cursor visible
    if @cursor_pos < @scroll_offset
      @scroll_offset = @cursor_pos
    elsif @cursor_pos >= @scroll_offset + terminal_height
      @scroll_offset = @cursor_pos - terminal_height + 1
    end

    start_index = [@scroll_offset, 0].max
    end_index = [start_index + terminal_height - 1, items.length - 1].min

    items[start_index..end_index]
  end

  def move_cursor_down
    max_pos = case @view_mode
              when :list
                @pages.length - 1
              when :content
                @content_lines.length - 1
              end
    
    @cursor_pos = [@cursor_pos + 1, max_pos].min
  end

  def move_cursor_up
    @cursor_pos = [@cursor_pos - 1, 0].max
  end

  def open_current_item
    case @view_mode
    when :list
      open_page(@pages[@cursor_pos])
    when :content
      follow_link_at_cursor
    end
  end

  def open_page(page)
    return unless page
    
    @history << @current_page if @current_page
    @current_page = page
    @content_lines = parse_markdown_content(page[:path])
    @view_mode = :content
    @cursor_pos = 0
    @scroll_offset = 0
  end

  def follow_link_at_cursor
    link = @links.find { |l| l[:line] == @cursor_pos }
    return unless link
    
    target_page = find_page_by_name(link[:text])
    unless target_page
      target_page = create_page(link[:text])
    end
    
    open_page(target_page)
  end

  def find_page_by_name(name)
    normalized_name = name.downcase.gsub(/[^a-z0-9]/, '')
    @pages.find do |page|
      page_normalized = page[:name].downcase.gsub(/[^a-z0-9]/, '')
      page_normalized == normalized_name
    end
  end

  def create_page(name)
    # Convert name to filename format
    filename = name.gsub(/[^a-zA-Z0-9\s-]/, '').gsub(/\s+/, '_').downcase
    file_path = @pages_dir / "#{filename}.md"
    
    # Create initial content
    initial_content = "# #{name}\n\n"
    
    # Write the file
    file_path.write(initial_content)
    
    # Create page entry
    new_page = {
      name: name,
      path: file_path,
      relative_path: file_path.relative_path_from(@pages_dir)
    }
    
    # Add to pages list and sort
    @pages << new_page
    @pages.sort_by! { |p| p[:name] }
    
    new_page
  end

  def go_back
    return if @history.empty?
    
    @current_page = @history.pop
    
    if @current_page
      @content_lines = parse_markdown_content(@current_page[:path])
      @view_mode = :content
    else
      @view_mode = :list
    end
    
    @cursor_pos = 0
    @scroll_offset = 0
  end

  def edit_current_page
    return unless @current_page && @view_mode == :content
    
    editor = ENV['EDITOR'] || 'vim'
    system("#{editor} #{@current_page[:path]}")
    
    # Refresh content after editing
    @content_lines = parse_markdown_content(@current_page[:path])
    @links = []
    parse_markdown_content(@current_page[:path]) # This populates @links
  end


  def handle_quit_command
    if @view_mode == :content
      @view_mode = :list
      @current_page = nil
      @cursor_pos = 0
      @scroll_offset = 0
      false # Don't quit, just return to list
    else
      true # Quit the application
    end
  end

  def read_input
    begin
      char = read_char
      return nil unless char
      
      if char == ':'
        begin
          print "\n:"
          STDOUT.flush
          command = ""
          
          loop do
            begin
              char = read_char
              return "" unless char
              
              case char
              when 13, 10 # Enter
                break
              when 127, 8 # Backspace
                unless command.empty?
                  command = command[0..-2]
                  print "\b \b"
                  STDOUT.flush
                end
              when 27 # Escape
                command = ""
                break
              when 3 # Ctrl+C
                cleanup
                exit(0)
              else
                if char.is_a?(String) && char.ord >= 32 && char.ord <= 126
                  command += char
                  print char
                  STDOUT.flush
                end
              end
            rescue Interrupt
              cleanup
              exit(0)
            rescue => e
              puts "\nError reading command input: #{e.message}"
              return ""
            end
          end
          
          return command
        rescue => e
          puts "\nError in command mode: #{e.message}"
          return ""
        end
      end
      
      char
    rescue Interrupt
      cleanup
      exit(0)
    rescue => e
      puts "Error reading input: #{e.message}"
      return nil
    end
  end

  def read_char
    begin
      return nil unless STDIN.tty?
      STDIN.getch
    rescue Interrupt
      cleanup
      exit(0)
    rescue => e
      puts "Error reading character: #{e.message}"
      return nil
    end
  end

  def animate_matrix_rain
    rows, cols = IO.console.winsize
    rain_lines = [rows / 2, 10].min
    chars = ('a'..'z').to_a + ('0'..'9').to_a + ['@', '#', '$', '%', '&']
    rain_lines.times do
      line = Array.new(cols) { rand < 0.02 ? chars.sample : ' ' }.join
      print "#{COLORS[:highlight]}#{line}#{COLORS[:normal]}\r\n"
      sleep(0.02)
    end
  end

  def clear_screen
    print "\e[2J\e[H"
  end

  def cleanup
    puts "\nGoodbye!"
  end
end

# Main execution
if __FILE__ == $0
  pages_dir = ARGV[0] || 'pages'
  
  unless Dir.exist?(pages_dir)
    puts "Error: Directory '#{pages_dir}' does not exist."
    puts "Usage: #{$0} [options] [pages_directory]"
    exit 1
  end
  
  browser = LogseqBrowser.new(pages_dir)
  browser.run
end